@model IEnumerable<BES.Areas.Procurement.Models.Activity>

@{
    ViewData["Title"] = "Index";
}

<div style="margin:5px 10px 0 10px">
    <section class="content-header" style="margin-bottom:5px">
        <h1>
            @ViewBag.PPName Head<small> - Procurement Plan Summary</small>
        </h1>
    </section>

    <div class="row" style="margin-bottom:20px">
        <div class="col-md-6">
            <div id="containerPie" style="min-width: 210px; height: 300px; max-width: 600px; margin: 0 auto"></div>
        </div>

        <div class="col-md-6">
            <div id="containerDonut" style="height: 300px"></div>
        </div>
    </div>
    <div class="row" style="margin-bottom:20px">
        <div class="col-md-12">
            <div id="containerGraph" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-4 col-md-4 col-sm-4">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <span class="label label-primary pull-right" style="font-size:14px">@String.Format("{0:#,##}", int.Parse(ViewBag.TotalGAECost))</span>
                    <h3 class="box-title">Planned Cost</h3>
                    <h2 class="no-margins font-bold">
                        @{ string s = ViewBag.TotalGAACost;}
                        @(String.Format("{0:#,##}", int.Parse(s)).PadLeft(2, '0'))
                    </h2>
                    <small>Commit Cost</small>
                </div>
            </div>
        </div>
        <div class="col-lg-4 col-md-4 col-sm-4">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <span class="label label-primary pull-right" style="font-size:14px">@String.Format("{0:#,##}", int.Parse(ViewBag.TotalGAECost))</span>
                    <h3 class="box-title">Commit Cost</h3>
                    <h2 class="no-margins font-bold">
                        @{ s = ViewBag.TotalGACommit;}
                        @(String.Format("{0:#,##}", int.Parse(s)).PadLeft(2, '0')) @*Change test*@
                    </h2>
                    <small>Payment Released</small>
                </div>
            </div>
        </div>
        <div class="col-lg-4 col-md-4 col-sm-4">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <span class="label label-primary pull-right" style="font-size:14px">@String.Format("{0:#,##}", int.Parse(ViewBag.TotalGAECost))</span>
                    <h3 class="box-title">Actual Cost</h3>
                    <h2 class="no-margins font-bold">
                        @{string Balance = ((int.Parse(ViewBag.TotalGAECost)) - ((int.Parse(ViewBag.TotalGACommit)))).ToString();}
                        <text>@String.Format("{0:#,##}", int.Parse(Balance))</text>
                    </h2>
                    <small>Balance</small>
                </div>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-lg-3 col-md-3 col-sm-3">
            <div class="box box-primary">
                <div class="box-header with-border">
                    @{string total = ViewBag.TotalGActivities; total = total.PadLeft(2, '0');}
                    <span class="label label-primary pull-right" style="font-size:14px">@total</span>
                    <h3 class="box-title">Planned Activities</h3>
                    <h2>
                        @{string complete = ViewBag.TotalGActivitiesCompleted; complete = complete.PadLeft(2, '0');}
                        <a href="#" style="color:#00a65a !important" class="search" data-url='/Procurement/Activities/Popup/3' data-toggle="modal" data-target="#exampleModalLong1">@complete</a>
                    </h2>
                    <small>Completed @*- <text style="font-size:13px;font-weight:bold">12%</text>*@</small>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-3 col-sm-3">
            <div class="box box-primary">
                <div class="box-header with-border">
                    @{string Cancelled = ViewBag.TotalGActivitiesCancelled; Cancelled = Cancelled.PadLeft(2, '0');}
                    <span class="label label-primary pull-right" style="font-size:14px">@total</span>
                    <h3 class="box-title">Planned Activities</h3>
                    <h2 class="no-margins font-bold">
                        @{ s = ViewBag.TotalGActivitiesProcess; s = s.PadLeft(2, '0');}
                        <a href="#" class="search" data-url='/Procurement/Activities/Popup/4' style="color:red" data-toggle="modal" data-target="#exampleModalLong1">@Cancelled</a> @*of @subtotal*@
                    </h2>
                    <small>Cancelled</small>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-3 col-sm-3">
            <div class="box box-primary">
                <div class="box-header with-border">
                    @{string subtotal = ((int.Parse(total)) - (int.Parse(complete)) - (int.Parse(Cancelled))).ToString(); subtotal = subtotal.PadLeft(2, '0');}
                    <span class="label label-primary pull-right" style="font-size:14px">@subtotal</span>
                    <h3 class="box-title">Remaining Activities</h3>
                    <h2 class="no-margins font-bold">
                        <a href="#" style="color:#00c0ef !important" class="search" data-url='/Procurement/Activities/Popup/2' data-toggle="modal" data-target="#exampleModalLong1">@s</a> @*of @subtotal*@
                    </h2>
                    <small>In-Process</small>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-3 col-sm-3">
            <div class="box box-primary">
                <div class="box-header with-border">
                    @{ total = ViewBag.TotalGActivities; total = total.PadLeft(2, '0');}
                    <span class="label label-primary pull-right" style="font-size:14px">@subtotal</span>
                    <h3 class="box-title">Remaning Activities</h3>
                    <h2 class="no-margins font-bold">
                        @{string remain = ViewBag.TotalGActivitiesRemain; remain = remain.PadLeft(2, '0');}
                        <a href="#" style="color:#d2d6de" class="search" data-url='/Procurement/Activities/Popup/1' data-toggle="modal" data-target="#exampleModalLong1">@remain</a>
                    </h2>
                    <small>Not Initiated</small>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <!-- Bar chart -->
            <div class="box box-primary">
                <div class="box-header with-border">
                    <i class="fa fa-bar-chart-o"></i>
                    <h3 class="box-title">Goods Activities vs Steps</h3>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                    </div>
                </div>
                <div class="box-body">
                    <div id="bar-chart" style="height: 300px;"></div>
                </div>
                <!-- /.box-body-->
            </div>
            <!-- /.box -->
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h3 class="box-header">List of  @Model.Select(a => a.PProcurementPlan.Name).FirstOrDefault() Activities @Html.ActionLink("Create New Activity", "Create", new { id = ViewBag.PPID }, new { @class = "btn btn-primary btn-xs" })</h3>
                </div>
                <div>

                    <table class="table">
                        <thead>
                            <tr>
                                <th>
                                    <text>Activity#</text>
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Name)
                                </th>
                                @*<th>
                                        @Html.DisplayNameFor(model => model.EstimatedCost)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.ActualCost)
                                    </th>*@
                                @*<th>
                                        @Html.DisplayNameFor(model => model.Method.Name)
                                    </th>*@
                                <th>
                                    <text>Estimated</text>
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.ReviewType)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Status)
                                </th>

                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var item in Model)
                            {
                                <tr>

                                    @*<td>
                                            @Html.DisplayFor(modelItem => item.PProcurementPlan.Name)
                                        </td>*@
                                    <td style="color:#3c8dbc;font-weight:bold">
                                        A#-@Html.DisplayFor(modelItem => item.ActivityNo)
                                    </td>
                                    <td style="color:#3c8dbc;font-weight:bold">
                                        @Html.DisplayFor(modelItem => item.Name)
                                    </td>
                                    @*<td>
                                            <text>@String.Format("{0:#,##}", item.EstimatedCost)</text>
                                        </td>
                                        <td>
                                            @{
                                                if (item.ActualCost != 0)
                                                {
                                                    <text>@String.Format("{0:#,##}", item.ActualCost)</text>
                                                }else
                                                {
                                                    <text>Nil</text>
                                                }
                                            }

                                                                </td>*@
                                    @*<td>
                                            @Html.DisplayFor(modelItem => item.Method.Name)
                                        </td>*@
                                    <td>
                                        @String.Format("{0:#,##}", item.EstimatedCost)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ReviewType)
                                    </td>

                                    @{
                                        if (item.Status == 1)
                                        {
                                            <td><text class="label label-default" style="font-weight:bold">Not Initiated</text></td> }
                                        else if (item.Status == 2)
                                        {
                                            <td><text class="label label-info" style="font-weight:bold"> In Process </text></td> }
                                        else if (item.Status == 3)
                                        {
                                            <td><text class="label label-success" style="font-weight:bold"> Completed </text></td> }
                                        else
                                        {
                                            <td><text class="label label-danger" style="font-weight:bold"> Cancelled </text></td> }
                                    }
                                    <td>
                                        @Html.ActionLink("Steps", "Edit", new { id = item.ActivityID }, new { @class = "btn btn-primary btn-sm" })
                                    </td>
                                    <td>@Html.ActionLink("View", "Details", new { id = item.ActivityID }, new { @class = "btn btn-primary btn-sm" })</td>
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>
            </div>
        </div>
    </div>

    <!-- Modal1 -->
    <div class="modal fade" id="exampleModalLong1" tabindex="-1" role="dialog" aria-hidden="true" style="z-index: 1400">
        <div class="modal-dialog" role="document" style="width:800px;min-height:600px">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="partial">Loading....</div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    @*<button type="button" class="btn btn-primary">Save changes</button>*@
                </div>
            </div>
        </div>
    </div>
</div>
@section Styles {
    <!-- DataTables -->
    <link rel="stylesheet" href="~/libs/datatables/css/dataTables.bootstrap.min.css">
}
<div id="dynamicContentContainer"></div>
@section Scripts {
    <script src="~/Highcharts/code/highcharts.js"></script>
    <script src="~/Highcharts/code/modules/exporting.js"></script>
    <script src="~/Highcharts/code/modules/export-data.js"></script>
    <script src="~/Highcharts/code/modules/series-label.js"></script>
    <script src="~/Highcharts/code/highcharts-3d.js"></script>

    <script src="~/libs/datatables/js/jquery.dataTables.min.js"></script>
    <script src="~/libs/datatables/js/dataTables.bootstrap.min.js"></script>
    <!-- FLOT CHARTS -->
    <script src="~/libs/flot/jquery.flot.min.js"></script>
    <!-- FLOT RESIZE PLUGIN - allows the chart to redraw when the window is resized -->
    <script src="~/libs/flot/jquery.flot.resize.min.js"></script>
    <!-- FLOT PIE PLUGIN - also used to draw donut charts -->
    <script src="~/libs/flot/jquery.flot.pie.min.js"></script>
    <!-- FLOT CATEGORIES PLUGIN - Used to draw bar charts -->
    <script src="~/libs/flot/jquery.flot.categories.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            // $('#Region-DropdownID').val(null).change();
            // alert('JQuery Entered')
            $('.dataTables-example').DataTable({
                "scrollY": 350,
                //"processing": true, // for show progress bar
                //"bJQueryUI": true,
                //"bServerSide": true,
                //"sAjaxSource": "SchoolList",
                "bPaginate": false,
                "ordering": false,
                dom: '<"html5buttons"B>lTfigtp',

                buttons: [
                    { extend: 'copy' },
                    { extend: 'csv' },
                    { extend: 'excel', title: 'ExampleFile' },
                    { extend: 'pdf', title: 'ExampleFile' },


                ]

            });
            $(function () {
                $('.search').click(function () {
                    var url = $(this).data('url');
                    var route = url;
                    $('#partial').load(route);
                });
            });
        });

    </script>
    <!-- Page script -->
    <script>
        $(function () {

            /*
             * BAR CHART
             * ---------
             */
           var data=[];
            var array1 = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.ActivitySequence))');
            var array2 = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.finalList))');
            for (var c = 0; c < 8; c++){@*@ViewBag.ActivitySequence[c] @ViewBag.finalList[c]*@
                data.push(['A#-' + array1[c],array2[c]]);
                }

            var bar_data = {

                data: data,
                color: '#3c8dbc'
            }
            $.plot('#bar-chart', [bar_data], {
                grid: {
                    borderWidth: 1,
                    borderColor: '#f3f3f3',
                    tickColor: '#f3f3f3'
                },
                series: {
                    bars: {
                        show: true,
                        barWidth: 0.5,
                        align: 'center'
                    }
                },
                xaxis: {
                    mode: 'categories',
                    tickLength: 0,
                    maxvalue: 9,
                    stepsize: 1
                }
            })
            /* END BAR CHART */

        })

    </script>
    <script type="text/javascript">
        // Radialize the colors
        Highcharts.setOptions({
            colors: Highcharts.map(Highcharts.getOptions().colors, function (color) {
                return {
                    radialGradient: {
                        cx: 0.5,
                        cy: 0.3,
                        r: 0.7
                    },
                    stops: [
                        [0, color],
                        [1, Highcharts.Color(color).brighten(-0.3).get('rgb')] // darken
                    ]
                };
            })
        });

        // Build the chart
        Highcharts.chart('containerPie', {
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false,
                type: 'pie'
            },
            title: {
                text: 'Activity Status'
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                        connectorColor: 'silver'
                    }
                }
            },
            series: [{
                name: 'Status',
                data: [
                    { name: 'Not Initiated', y: 61.41 },
                    { name: 'In Process', y: 11.84 },
                    { name: 'Completed', y: 10.85 },
                    { name: 'Canceled', y: 4.67 }
                ]
            }]
        });
        Highcharts.chart('containerGraph', {
            chart: {
                type: 'spline'
            },
            title: {
                text: 'Snow depth at Vikjafjellet, Norway'
            },
            subtitle: {
                text: 'Irregular time data in Highcharts JS'
            },
            xAxis: {
                type: 'datetime',
                dateTimeLabelFormats: { // don't display the dummy year
                    month: '%e. %b',
                    year: '%b'
                },
                title: {
                    text: 'Date'
                }
            },
            yAxis: {
                title: {
                    text: 'Snow depth (m)'
                },
                min: 0
            },
            tooltip: {
                headerFormat: '<b>{series.name}</b><br>',
                pointFormat: '{point.x:%e. %b}: {point.y:.2f} m'
            },

            plotOptions: {
                series: {
                    marker: {
                        enabled: true
                    }
                }
            },

            colors: ['#6CF', '#39F', '#06C', '#036', '#000'],

            // Define the data points. All series have a dummy year
            // of 1970/71 in order to be compared on the same x axis. Note
            // that in JavaScript, months start at 0 for January, 1 for February etc.
            series: [{
                name: "Winter 2014-2015",
                data: [
                    [Date.UTC(1970, 10, 25), 0],
                    [Date.UTC(1970, 11, 6), 0.25],
                    [Date.UTC(1970, 11, 20), 1.41],
                    [Date.UTC(1970, 11, 25), 1.64],
                    [Date.UTC(1971, 0, 4), 1.6],
                    [Date.UTC(1971, 0, 17), 2.55],
                    [Date.UTC(1971, 0, 24), 2.62],
                    [Date.UTC(1971, 1, 4), 2.5],
                    [Date.UTC(1971, 1, 14), 2.42],
                    [Date.UTC(1971, 2, 6), 2.74],
                    [Date.UTC(1971, 2, 14), 2.62],
                    [Date.UTC(1971, 2, 24), 2.6],
                    [Date.UTC(1971, 3, 1), 2.81],
                    [Date.UTC(1971, 3, 11), 2.63],
                    [Date.UTC(1971, 3, 27), 2.77],
                    [Date.UTC(1971, 4, 4), 2.68],
                    [Date.UTC(1971, 4, 9), 2.56],
                    [Date.UTC(1971, 4, 14), 2.39],
                    [Date.UTC(1971, 4, 19), 2.3],
                    [Date.UTC(1971, 5, 4), 2],
                    [Date.UTC(1971, 5, 9), 1.85],
                    [Date.UTC(1971, 5, 14), 1.49],
                    [Date.UTC(1971, 5, 19), 1.27],
                    [Date.UTC(1971, 5, 24), 0.99],
                    [Date.UTC(1971, 5, 29), 0.67],
                    [Date.UTC(1971, 6, 3), 0.18],
                    [Date.UTC(1971, 6, 4), 0]
                ]
            }, {
                name: "Winter 2015-2016",
                data: [
                    [Date.UTC(1970, 10, 9), 0],
                    [Date.UTC(1970, 10, 15), 0.23],
                    [Date.UTC(1970, 10, 20), 0.25],
                    [Date.UTC(1970, 10, 25), 0.23],
                    [Date.UTC(1970, 10, 30), 0.39],
                    [Date.UTC(1970, 11, 5), 0.41],
                    [Date.UTC(1970, 11, 10), 0.59],
                    [Date.UTC(1970, 11, 15), 0.73],
                    [Date.UTC(1970, 11, 20), 0.41],
                    [Date.UTC(1970, 11, 25), 1.07],
                    [Date.UTC(1970, 11, 30), 0.88],
                    [Date.UTC(1971, 0, 5), 0.85],
                    [Date.UTC(1971, 0, 11), 0.89],
                    [Date.UTC(1971, 0, 17), 1.04],
                    [Date.UTC(1971, 0, 20), 1.02],
                    [Date.UTC(1971, 0, 25), 1.03],
                    [Date.UTC(1971, 0, 30), 1.39],
                    [Date.UTC(1971, 1, 5), 1.77],
                    [Date.UTC(1971, 1, 26), 2.12],
                    [Date.UTC(1971, 3, 19), 2.1],
                    [Date.UTC(1971, 4, 9), 1.7],
                    [Date.UTC(1971, 4, 29), 0.85],
                    [Date.UTC(1971, 5, 7), 0]
                ]
            }, {
                name: "Winter 2016-2017",
                data: [
                    [Date.UTC(1970, 9, 15), 0],
                    [Date.UTC(1970, 9, 31), 0.09],
                    [Date.UTC(1970, 10, 7), 0.17],
                    [Date.UTC(1970, 10, 10), 0.1],
                    [Date.UTC(1970, 11, 10), 0.1],
                    [Date.UTC(1970, 11, 13), 0.1],
                    [Date.UTC(1970, 11, 16), 0.11],
                    [Date.UTC(1970, 11, 19), 0.11],
                    [Date.UTC(1970, 11, 22), 0.08],
                    [Date.UTC(1970, 11, 25), 0.23],
                    [Date.UTC(1970, 11, 28), 0.37],
                    [Date.UTC(1971, 0, 16), 0.68],
                    [Date.UTC(1971, 0, 19), 0.55],
                    [Date.UTC(1971, 0, 22), 0.4],
                    [Date.UTC(1971, 0, 25), 0.4],
                    [Date.UTC(1971, 0, 28), 0.37],
                    [Date.UTC(1971, 0, 31), 0.43],
                    [Date.UTC(1971, 1, 4), 0.42],
                    [Date.UTC(1971, 1, 7), 0.39],
                    [Date.UTC(1971, 1, 10), 0.39],
                    [Date.UTC(1971, 1, 13), 0.39],
                    [Date.UTC(1971, 1, 16), 0.39],
                    [Date.UTC(1971, 1, 19), 0.35],
                    [Date.UTC(1971, 1, 22), 0.45],
                    [Date.UTC(1971, 1, 25), 0.62],
                    [Date.UTC(1971, 1, 28), 0.68],
                    [Date.UTC(1971, 2, 4), 0.68],
                    [Date.UTC(1971, 2, 7), 0.65],
                    [Date.UTC(1971, 2, 10), 0.65],
                    [Date.UTC(1971, 2, 13), 0.75],
                    [Date.UTC(1971, 2, 16), 0.86],
                    [Date.UTC(1971, 2, 19), 1.14],
                    [Date.UTC(1971, 2, 22), 1.2],
                    [Date.UTC(1971, 2, 25), 1.27],
                    [Date.UTC(1971, 2, 27), 1.12],
                    [Date.UTC(1971, 2, 30), 0.98],
                    [Date.UTC(1971, 3, 3), 0.85],
                    [Date.UTC(1971, 3, 6), 1.04],
                    [Date.UTC(1971, 3, 9), 0.92],
                    [Date.UTC(1971, 3, 12), 0.96],
                    [Date.UTC(1971, 3, 15), 0.94],
                    [Date.UTC(1971, 3, 18), 0.99],
                    [Date.UTC(1971, 3, 21), 0.96],
                    [Date.UTC(1971, 3, 24), 1.15],
                    [Date.UTC(1971, 3, 27), 1.18],
                    [Date.UTC(1971, 3, 30), 1.12],
                    [Date.UTC(1971, 4, 3), 1.06],
                    [Date.UTC(1971, 4, 6), 0.96],
                    [Date.UTC(1971, 4, 9), 0.87],
                    [Date.UTC(1971, 4, 12), 0.88],
                    [Date.UTC(1971, 4, 15), 0.79],
                    [Date.UTC(1971, 4, 18), 0.54],
                    [Date.UTC(1971, 4, 21), 0.34],
                    [Date.UTC(1971, 4, 25), 0]
                ]
            }],

            responsive: {
                rules: [{
                    condition: {
                        maxWidth: 500
                    },
                    chartOptions: {
                        plotOptions: {
                            series: {
                                marker: {
                                    radius: 2.5
                                }
                            }
                        }
                    }
                }]
            }
        });
        Highcharts.chart('containerDonut', {
            chart: {
                type: 'pie',
                options3d: {
                    enabled: true,
                    alpha: 45
                }
            },
            title: {
                text: 'Contents of Highsoft\'s weekly fruit delivery'
            },
            subtitle: {
                text: '3D donut in Highcharts'
            },
            plotOptions: {
                pie: {
                    innerSize: 100,
                    depth: 45
                }
            },
            series: [{
                name: 'Delivered amount',
                data: [
                    ['Bananas', 8],
                    ['Kiwi', 3],
                    ['Mixed nuts', 1],
                    ['Oranges', 6],
                    ['Apples', 8],
                    ['Pears', 4],
                    ['Clementines', 4],
                    ['Reddish (bag)', 1],
                    ['Grapes (bunch)', 1]
                ]
            }]
        });
    </script>
}